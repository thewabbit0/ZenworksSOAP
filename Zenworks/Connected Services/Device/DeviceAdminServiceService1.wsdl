<?xml version="1.0" encoding="utf-8"?>
<definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:devices="http://novell.com/zenworks/datamodel/objects/devices" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://novell.com/zenworks/datamodel/services/devices/soap" xmlns:objects="http://novell.com/zenworks/datamodel/objects" xmlns:folders="http://novell.com/zenworks/datamodel/objects/folders" xmlns:exceptions="http://novell.com/zenworks/datamodel/exceptions" xmlns:mobile="http://novell.com/zenworks/datamodel/objects/mobile" name="DeviceAdminServiceService" targetNamespace="http://novell.com/zenworks/datamodel/services/devices/soap" xmlns="http://schemas.xmlsoap.org/wsdl/">
  <types>
    <xsd:schema xmlns="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://novell.com/zenworks/datamodel/services/devices/soap">
      <xsd:import schemaLocation="core-addons-mobile.xsd" namespace="http://novell.com/zenworks/datamodel/objects/mobile" />
      <xsd:import schemaLocation="exceptions.xsd" namespace="http://novell.com/zenworks/datamodel/exceptions" />
      <xsd:import schemaLocation="core-objects.xsd" namespace="http://novell.com/zenworks/datamodel/objects" />
      <xsd:import schemaLocation="core-addons-devices.xsd" namespace="http://novell.com/zenworks/datamodel/objects/devices" />
      <xsd:import schemaLocation="core-folders.xsd" namespace="http://novell.com/zenworks/datamodel/objects/folders" />
      <xsd:element name="cloneRequest" type="tns:cloneRequest" />
      <xsd:complexType name="cloneRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="obj" type="objects:ZENObject" />
          <xsd:element minOccurs="0" name="newName" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="cloneResponse" type="tns:cloneResponse" />
      <xsd:complexType name="cloneResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="objects:ZENObject" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="createRequest" type="tns:createRequest" />
      <xsd:complexType name="createRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="object" type="objects:ZENObject" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="createResponse" type="tns:createResponse" />
      <xsd:complexType name="createResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="objects:ZENObject" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="createOSTargetRequest" type="tns:createOSTargetRequest" />
      <xsd:complexType name="createOSTargetRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="target" type="devices:OSTarget" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="createOSTargetResponse" type="tns:createOSTargetResponse" />
      <xsd:complexType name="createOSTargetResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="deleteRequest" type="tns:deleteRequest" />
      <xsd:complexType name="deleteRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="uid" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="deleteResponse" type="tns:deleteResponse" />
      <xsd:complexType name="deleteResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="deleteOSTargetRequest" type="tns:deleteOSTargetRequest" />
      <xsd:complexType name="deleteOSTargetRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="target" type="devices:OSTarget" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="deleteOSTargetResponse" type="tns:deleteOSTargetResponse" />
      <xsd:complexType name="deleteOSTargetResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="deleteRecursiveRequest" type="tns:deleteRecursiveRequest" />
      <xsd:complexType name="deleteRecursiveRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="uid" type="xsd:string" />
          <xsd:element name="recursive" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="deleteRecursiveResponse" type="tns:deleteRecursiveResponse" />
      <xsd:complexType name="deleteRecursiveResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="return" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="existsByParentAndNameRequest" type="tns:existsByParentAndNameRequest" />
      <xsd:complexType name="existsByParentAndNameRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="parentUID" type="xsd:string" />
          <xsd:element minOccurs="0" name="name" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="existsByParentAndNameResponse" type="tns:existsByParentAndNameResponse" />
      <xsd:complexType name="existsByParentAndNameResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="existsByUIDRequest" type="tns:existsByUIDRequest" />
      <xsd:complexType name="existsByUIDRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="uid" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="existsByUIDResponse" type="tns:existsByUIDResponse" />
      <xsd:complexType name="existsByUIDResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAllSearchResultsRequest" type="tns:getAllSearchResultsRequest" />
      <xsd:complexType name="getAllSearchResultsRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="folderUID" type="xsd:string" />
          <xsd:element minOccurs="0" name="options" type="objects:SearchOptions" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAllSearchResultsResponse" type="tns:getAllSearchResultsResponse" />
      <xsd:complexType name="getAllSearchResultsResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="return" type="objects:SearchResult" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAllSearchResultsWIthTokenRequest" type="tns:getAllSearchResultsWIthTokenRequest" />
      <xsd:complexType name="getAllSearchResultsWIthTokenRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="searchToken" type="objects:SearchToken" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAllSearchResultsWIthTokenResponse" type="tns:getAllSearchResultsWIthTokenResponse" />
      <xsd:complexType name="getAllSearchResultsWIthTokenResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="return" type="objects:SearchResult" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAttributesRequest" type="tns:getAttributesRequest" />
      <xsd:complexType name="getAttributesRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="uid" type="xsd:string" />
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="attributes" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAttributesResponse" type="tns:getAttributesResponse" />
      <xsd:complexType name="getAttributesResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="return" type="xsd:anyType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getBasicObjectRequest" type="tns:getBasicObjectRequest" />
      <xsd:complexType name="getBasicObjectRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="uid" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getBasicObjectResponse" type="tns:getBasicObjectResponse" />
      <xsd:complexType name="getBasicObjectResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="objects:BasicObject" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getByParentAndNameRequest" type="tns:getByParentAndNameRequest" />
      <xsd:complexType name="getByParentAndNameRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="parent" type="objects:ZENObject" />
          <xsd:element minOccurs="0" name="name" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getByParentAndNameResponse" type="tns:getByParentAndNameResponse" />
      <xsd:complexType name="getByParentAndNameResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="objects:ZENObject" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getByParentUIDAndNameRequest" type="tns:getByParentUIDAndNameRequest" />
      <xsd:complexType name="getByParentUIDAndNameRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="parentUID" type="xsd:string" />
          <xsd:element minOccurs="0" name="name" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getByParentUIDAndNameResponse" type="tns:getByParentUIDAndNameResponse" />
      <xsd:complexType name="getByParentUIDAndNameResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="objects:ZENObject" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getByUIDRequest" type="tns:getByUIDRequest" />
      <xsd:complexType name="getByUIDRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="uid" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getByUIDResponse" type="tns:getByUIDResponse" />
      <xsd:complexType name="getByUIDResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="objects:ZENObject" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDefaultFolderRequest" type="tns:getDefaultFolderRequest" />
      <xsd:complexType name="getDefaultFolderRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceState" type="xsd:string" />
          <xsd:element minOccurs="0" name="deviceType" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDefaultFolderResponse" type="tns:getDefaultFolderResponse" />
      <xsd:complexType name="getDefaultFolderResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="folders:Folder" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDeviceAgentVersionRequest" type="tns:getDeviceAgentVersionRequest" />
      <xsd:complexType name="getDeviceAgentVersionRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="uid" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDeviceAgentVersionResponse" type="tns:getDeviceAgentVersionResponse" />
      <xsd:complexType name="getDeviceAgentVersionResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDeviceByHostNameRequest" type="tns:getDeviceByHostNameRequest" />
      <xsd:complexType name="getDeviceByHostNameRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="hostName" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDeviceByHostNameResponse" type="tns:getDeviceByHostNameResponse" />
      <xsd:complexType name="getDeviceByHostNameResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="devices:Device" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDevicePlatformRequest" type="tns:getDevicePlatformRequest" />
      <xsd:complexType name="getDevicePlatformRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="uid" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDevicePlatformResponse" type="tns:getDevicePlatformResponse" />
      <xsd:complexType name="getDevicePlatformResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDeviceUIDsWhereLoggedInRequest" type="tns:getDeviceUIDsWhereLoggedInRequest" />
      <xsd:complexType name="getDeviceUIDsWhereLoggedInRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="userUID" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDeviceUIDsWhereLoggedInResponse" type="tns:getDeviceUIDsWhereLoggedInResponse" />
      <xsd:complexType name="getDeviceUIDsWhereLoggedInResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="return" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getFullQueryGroupLogRequest" type="tns:getFullQueryGroupLogRequest" />
      <xsd:complexType name="getFullQueryGroupLogRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="queryGroupLogID" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getFullQueryGroupLogResponse" type="tns:getFullQueryGroupLogResponse" />
      <xsd:complexType name="getFullQueryGroupLogResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="devices:FullQueryGroupLog" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getIPAddressesWhereLoggedInRequest" type="tns:getIPAddressesWhereLoggedInRequest" />
      <xsd:complexType name="getIPAddressesWhereLoggedInRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="userUID" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getIPAddressesWhereLoggedInResponse" type="tns:getIPAddressesWhereLoggedInResponse" />
      <xsd:complexType name="getIPAddressesWhereLoggedInResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="return" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getLocalServerUIDRequest" type="tns:getLocalServerUIDRequest" />
      <xsd:complexType name="getLocalServerUIDRequest">
        <xsd:sequence />
      </xsd:complexType>
      <xsd:element name="getLocalServerUIDResponse" type="tns:getLocalServerUIDResponse" />
      <xsd:complexType name="getLocalServerUIDResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getMobileFolderRequest" type="tns:getMobileFolderRequest" />
      <xsd:complexType name="getMobileFolderRequest">
        <xsd:sequence />
      </xsd:complexType>
      <xsd:element name="getMobileFolderResponse" type="tns:getMobileFolderResponse" />
      <xsd:complexType name="getMobileFolderResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="folders:Folder" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getOSTargetRequest" type="tns:getOSTargetRequest" />
      <xsd:complexType name="getOSTargetRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="name" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getOSTargetResponse" type="tns:getOSTargetResponse" />
      <xsd:complexType name="getOSTargetResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="devices:OSTarget" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getOSTargetByIdRequest" type="tns:getOSTargetByIdRequest" />
      <xsd:complexType name="getOSTargetByIdRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="id" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getOSTargetByIdResponse" type="tns:getOSTargetByIdResponse" />
      <xsd:complexType name="getOSTargetByIdResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="devices:OSTarget" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getOSTargetByNameSPRequest" type="tns:getOSTargetByNameSPRequest" />
      <xsd:complexType name="getOSTargetByNameSPRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="name" type="xsd:string" />
          <xsd:element minOccurs="0" name="supportPack" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getOSTargetByNameSPResponse" type="tns:getOSTargetByNameSPResponse" />
      <xsd:complexType name="getOSTargetByNameSPResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="devices:OSTarget" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getOSTargetNamesRequest" type="tns:getOSTargetNamesRequest" />
      <xsd:complexType name="getOSTargetNamesRequest">
        <xsd:sequence />
      </xsd:complexType>
      <xsd:element name="getOSTargetNamesResponse" type="tns:getOSTargetNamesResponse" />
      <xsd:complexType name="getOSTargetNamesResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="return" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getOSTargetNamesForPlatformRequest" type="tns:getOSTargetNamesForPlatformRequest" />
      <xsd:complexType name="getOSTargetNamesForPlatformRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="platform" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getOSTargetNamesForPlatformResponse" type="tns:getOSTargetNamesForPlatformResponse" />
      <xsd:complexType name="getOSTargetNamesForPlatformResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="return" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getOSTargetsRequest" type="tns:getOSTargetsRequest" />
      <xsd:complexType name="getOSTargetsRequest">
        <xsd:sequence />
      </xsd:complexType>
      <xsd:element name="getOSTargetsResponse" type="tns:getOSTargetsResponse" />
      <xsd:complexType name="getOSTargetsResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="return" type="devices:OSTarget" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getObjectHierachyRequest" type="tns:getObjectHierachyRequest" />
      <xsd:complexType name="getObjectHierachyRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="uid" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getObjectHierachyResponse" type="tns:getObjectHierachyResponse" />
      <xsd:complexType name="getObjectHierachyResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="return" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getPlatformsRequest" type="tns:getPlatformsRequest" />
      <xsd:complexType name="getPlatformsRequest">
        <xsd:sequence />
      </xsd:complexType>
      <xsd:element name="getPlatformsResponse" type="tns:getPlatformsResponse" />
      <xsd:complexType name="getPlatformsResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="return" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getQueryGroupLogsRequest" type="tns:getQueryGroupLogsRequest" />
      <xsd:complexType name="getQueryGroupLogsRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="queryGroupUID" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getQueryGroupLogsResponse" type="tns:getQueryGroupLogsResponse" />
      <xsd:complexType name="getQueryGroupLogsResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="return" type="devices:QueryGroupLog" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getRootRequest" type="tns:getRootRequest" />
      <xsd:complexType name="getRootRequest">
        <xsd:sequence />
      </xsd:complexType>
      <xsd:element name="getRootResponse" type="tns:getRootResponse" />
      <xsd:complexType name="getRootResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="folders:Folder" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getRootPathRequest" type="tns:getRootPathRequest" />
      <xsd:complexType name="getRootPathRequest">
        <xsd:sequence />
      </xsd:complexType>
      <xsd:element name="getRootPathResponse" type="tns:getRootPathResponse" />
      <xsd:complexType name="getRootPathResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getRootUIDRequest" type="tns:getRootUIDRequest" />
      <xsd:complexType name="getRootUIDRequest">
        <xsd:sequence />
      </xsd:complexType>
      <xsd:element name="getRootUIDResponse" type="tns:getRootUIDResponse" />
      <xsd:complexType name="getRootUIDResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSearchResultsRequest" type="tns:getSearchResultsRequest" />
      <xsd:complexType name="getSearchResultsRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="searchToken" type="objects:SearchToken" />
          <xsd:element name="index" type="xsd:int" />
          <xsd:element name="count" type="xsd:int" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSearchResultsResponse" type="tns:getSearchResultsResponse" />
      <xsd:complexType name="getSearchResultsResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="return" type="objects:SearchResult" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getServerFolderRequest" type="tns:getServerFolderRequest" />
      <xsd:complexType name="getServerFolderRequest">
        <xsd:sequence />
      </xsd:complexType>
      <xsd:element name="getServerFolderResponse" type="tns:getServerFolderResponse" />
      <xsd:complexType name="getServerFolderResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="folders:Folder" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getWorkstationFolderRequest" type="tns:getWorkstationFolderRequest" />
      <xsd:complexType name="getWorkstationFolderRequest">
        <xsd:sequence />
      </xsd:complexType>
      <xsd:element name="getWorkstationFolderResponse" type="tns:getWorkstationFolderResponse" />
      <xsd:complexType name="getWorkstationFolderResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="folders:Folder" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="isTestDeviceRequest" type="tns:isTestDeviceRequest" />
      <xsd:complexType name="isTestDeviceRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="uid" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="isTestDeviceResponse" type="tns:isTestDeviceResponse" />
      <xsd:complexType name="isTestDeviceResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="lookUpDeviceRequest" type="tns:lookUpDeviceRequest" />
      <xsd:complexType name="lookUpDeviceRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="ipaddress" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="lookUpDeviceResponse" type="tns:lookUpDeviceResponse" />
      <xsd:complexType name="lookUpDeviceResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="devices:Device" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="moveRequest" type="tns:moveRequest" />
      <xsd:complexType name="moveRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="obj" type="objects:ZENObject" />
          <xsd:element minOccurs="0" name="newParent" type="objects:ZENObject" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="moveResponse" type="tns:moveResponse" />
      <xsd:complexType name="moveResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="previewQueryGroupMembersRequest" type="tns:previewQueryGroupMembersRequest" />
      <xsd:complexType name="previewQueryGroupMembersRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="queryGroupType" type="xsd:string" />
          <xsd:element minOccurs="0" name="filter" type="objects:FilterSetList" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="previewQueryGroupMembersResponse" type="tns:previewQueryGroupMembersResponse" />
      <xsd:complexType name="previewQueryGroupMembersResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="objects:SearchToken" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="previewQueryGroupMembersWithContextsRequest" type="tns:previewQueryGroupMembersWithContextsRequest" />
      <xsd:complexType name="previewQueryGroupMembersWithContextsRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="queryGroupType" type="xsd:string" />
          <xsd:element minOccurs="0" name="newFilter" type="objects:FilterSetList" />
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="contexts" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="previewQueryGroupMembersWithContextsResponse" type="tns:previewQueryGroupMembersWithContextsResponse" />
      <xsd:complexType name="previewQueryGroupMembersWithContextsResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="objects:SearchToken" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="purgeAndUpdateOSTargetsRequest" type="tns:purgeAndUpdateOSTargetsRequest" />
      <xsd:complexType name="purgeAndUpdateOSTargetsRequest">
        <xsd:sequence />
      </xsd:complexType>
      <xsd:element name="purgeAndUpdateOSTargetsResponse" type="tns:purgeAndUpdateOSTargetsResponse" />
      <xsd:complexType name="purgeAndUpdateOSTargetsResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="refreshQueryGroupRequest" type="tns:refreshQueryGroupRequest" />
      <xsd:complexType name="refreshQueryGroupRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="uid" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="refreshQueryGroupResponse" type="tns:refreshQueryGroupResponse" />
      <xsd:complexType name="refreshQueryGroupResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="refreshSearchTokenRequest" type="tns:refreshSearchTokenRequest" />
      <xsd:complexType name="refreshSearchTokenRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="searchToken" type="objects:SearchToken" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="refreshSearchTokenResponse" type="tns:refreshSearchTokenResponse" />
      <xsd:complexType name="refreshSearchTokenResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="objects:SearchToken" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="releaseSearchTokenRequest" type="tns:releaseSearchTokenRequest" />
      <xsd:complexType name="releaseSearchTokenRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="searchToken" type="objects:SearchToken" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="releaseSearchTokenResponse" type="tns:releaseSearchTokenResponse" />
      <xsd:complexType name="releaseSearchTokenResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="renameRequest" type="tns:renameRequest" />
      <xsd:complexType name="renameRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="obj" type="objects:ZENObject" />
          <xsd:element minOccurs="0" name="newName" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="renameResponse" type="tns:renameResponse" />
      <xsd:complexType name="renameResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="retireDeviceRequest" type="tns:retireDeviceRequest" />
      <xsd:complexType name="retireDeviceRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="object" type="objects:ZENObject" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="retireDeviceResponse" type="tns:retireDeviceResponse" />
      <xsd:complexType name="retireDeviceResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="searchRequest" type="tns:searchRequest" />
      <xsd:complexType name="searchRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="folderUID" type="xsd:string" />
          <xsd:element minOccurs="0" name="options" type="objects:SearchOptions" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="searchResponse" type="tns:searchResponse" />
      <xsd:complexType name="searchResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="objects:SearchToken" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setDevicesAsNonTestDevicesRequest" type="tns:setDevicesAsNonTestDevicesRequest" />
      <xsd:complexType name="setDevicesAsNonTestDevicesRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="testDeviceUIDs" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setDevicesAsNonTestDevicesResponse" type="tns:setDevicesAsNonTestDevicesResponse" />
      <xsd:complexType name="setDevicesAsNonTestDevicesResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setDevicesAsTestDevicesRequest" type="tns:setDevicesAsTestDevicesRequest" />
      <xsd:complexType name="setDevicesAsTestDevicesRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="deviceUIDs" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setDevicesAsTestDevicesResponse" type="tns:setDevicesAsTestDevicesResponse" />
      <xsd:complexType name="setDevicesAsTestDevicesResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="unretireDeviceRequest" type="tns:unretireDeviceRequest" />
      <xsd:complexType name="unretireDeviceRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="object" type="objects:ZENObject" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="unretireDeviceResponse" type="tns:unretireDeviceResponse" />
      <xsd:complexType name="unretireDeviceResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="updateRequest" type="tns:updateRequest" />
      <xsd:complexType name="updateRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="object" type="objects:ZENObject" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="updateResponse" type="tns:updateResponse" />
      <xsd:complexType name="updateResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="updateOSTargetRequest" type="tns:updateOSTargetRequest" />
      <xsd:complexType name="updateOSTargetRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="target" type="devices:OSTarget" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="updateOSTargetResponse" type="tns:updateOSTargetResponse" />
      <xsd:complexType name="updateOSTargetResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="validateDeviceCredentialsRequest" type="tns:validateDeviceCredentialsRequest" />
      <xsd:complexType name="validateDeviceCredentialsRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceUID" type="xsd:string" />
          <xsd:element minOccurs="0" name="password" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="validateDeviceCredentialsResponse" type="tns:validateDeviceCredentialsResponse" />
      <xsd:complexType name="validateDeviceCredentialsResponse">
        <xsd:sequence>
          <xsd:element name="return" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDevicesInFolderRequest" type="tns:getDevicesInFolderRequest" />
      <xsd:complexType name="getDevicesInFolderRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="folderUID" type="xsd:string" />
          <xsd:element name="recursive" type="xsd:boolean" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDevicesInFolderResponse" type="tns:getDevicesInFolderResponse" />
      <xsd:complexType name="getDevicesInFolderResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="return" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAllDevicesForUserRequest" type="tns:getAllDevicesForUserRequest" />
      <xsd:complexType name="getAllDevicesForUserRequest">
        <xsd:sequence>
          <xsd:element name="userUID" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAllDevicesForUserResponse" type="tns:getAllDevicesForUserResponse" />
      <xsd:complexType name="getAllDevicesForUserResponse">
        <xsd:sequence>
          <xsd:element name="return" type="devices:DeviceBasicInfos" />
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </types>
  <message name="RemoteDataModelException">
    <part name="fault" element="exceptions:RemoteDataModelException" />
  </message>
  <message name="cloneInput">
    <part name="parameters" element="tns:cloneRequest" />
  </message>
  <message name="cloneOutput">
    <part name="parameters" element="tns:cloneResponse" />
  </message>
  <message name="createInput">
    <part name="parameters" element="tns:createRequest" />
  </message>
  <message name="createOutput">
    <part name="parameters" element="tns:createResponse" />
  </message>
  <message name="createOSTargetInput">
    <part name="parameters" element="tns:createOSTargetRequest" />
  </message>
  <message name="createOSTargetOutput">
    <part name="parameters" element="tns:createOSTargetResponse" />
  </message>
  <message name="deleteInput">
    <part name="parameters" element="tns:deleteRequest" />
  </message>
  <message name="deleteOutput">
    <part name="parameters" element="tns:deleteResponse" />
  </message>
  <message name="deleteOSTargetInput">
    <part name="parameters" element="tns:deleteOSTargetRequest" />
  </message>
  <message name="deleteOSTargetOutput">
    <part name="parameters" element="tns:deleteOSTargetResponse" />
  </message>
  <message name="deleteRecursiveInput">
    <part name="parameters" element="tns:deleteRecursiveRequest" />
  </message>
  <message name="deleteRecursiveOutput">
    <part name="parameters" element="tns:deleteRecursiveResponse" />
  </message>
  <message name="existsByParentAndNameInput">
    <part name="parameters" element="tns:existsByParentAndNameRequest" />
  </message>
  <message name="existsByParentAndNameOutput">
    <part name="parameters" element="tns:existsByParentAndNameResponse" />
  </message>
  <message name="existsByUIDInput">
    <part name="parameters" element="tns:existsByUIDRequest" />
  </message>
  <message name="existsByUIDOutput">
    <part name="parameters" element="tns:existsByUIDResponse" />
  </message>
  <message name="getAllSearchResultsInput">
    <part name="parameters" element="tns:getAllSearchResultsRequest" />
  </message>
  <message name="getAllSearchResultsOutput">
    <part name="parameters" element="tns:getAllSearchResultsResponse" />
  </message>
  <message name="getAllSearchResultsWIthTokenInput">
    <part name="parameters" element="tns:getAllSearchResultsWIthTokenRequest" />
  </message>
  <message name="getAllSearchResultsWIthTokenOutput">
    <part name="parameters" element="tns:getAllSearchResultsWIthTokenResponse" />
  </message>
  <message name="getAttributesInput">
    <part name="parameters" element="tns:getAttributesRequest" />
  </message>
  <message name="getAttributesOutput">
    <part name="parameters" element="tns:getAttributesResponse" />
  </message>
  <message name="getBasicObjectInput">
    <part name="parameters" element="tns:getBasicObjectRequest" />
  </message>
  <message name="getBasicObjectOutput">
    <part name="parameters" element="tns:getBasicObjectResponse" />
  </message>
  <message name="getByParentAndNameInput">
    <part name="parameters" element="tns:getByParentAndNameRequest" />
  </message>
  <message name="getByParentAndNameOutput">
    <part name="parameters" element="tns:getByParentAndNameResponse" />
  </message>
  <message name="getByParentUIDAndNameInput">
    <part name="parameters" element="tns:getByParentUIDAndNameRequest" />
  </message>
  <message name="getByParentUIDAndNameOutput">
    <part name="parameters" element="tns:getByParentUIDAndNameResponse" />
  </message>
  <message name="getByUIDInput">
    <part name="parameters" element="tns:getByUIDRequest" />
  </message>
  <message name="getByUIDOutput">
    <part name="parameters" element="tns:getByUIDResponse" />
  </message>
  <message name="getDefaultFolderInput">
    <part name="parameters" element="tns:getDefaultFolderRequest" />
  </message>
  <message name="getDefaultFolderOutput">
    <part name="parameters" element="tns:getDefaultFolderResponse" />
  </message>
  <message name="getDeviceAgentVersionInput">
    <part name="parameters" element="tns:getDeviceAgentVersionRequest" />
  </message>
  <message name="getDeviceAgentVersionOutput">
    <part name="parameters" element="tns:getDeviceAgentVersionResponse" />
  </message>
  <message name="getDeviceByHostNameInput">
    <part name="parameters" element="tns:getDeviceByHostNameRequest" />
  </message>
  <message name="getDeviceByHostNameOutput">
    <part name="parameters" element="tns:getDeviceByHostNameResponse" />
  </message>
  <message name="getDevicePlatformInput">
    <part name="parameters" element="tns:getDevicePlatformRequest" />
  </message>
  <message name="getDevicePlatformOutput">
    <part name="parameters" element="tns:getDevicePlatformResponse" />
  </message>
  <message name="getDeviceUIDsWhereLoggedInInput">
    <part name="parameters" element="tns:getDeviceUIDsWhereLoggedInRequest" />
  </message>
  <message name="getDeviceUIDsWhereLoggedInOutput">
    <part name="parameters" element="tns:getDeviceUIDsWhereLoggedInResponse" />
  </message>
  <message name="getFullQueryGroupLogInput">
    <part name="parameters" element="tns:getFullQueryGroupLogRequest" />
  </message>
  <message name="getFullQueryGroupLogOutput">
    <part name="parameters" element="tns:getFullQueryGroupLogResponse" />
  </message>
  <message name="getIPAddressesWhereLoggedInInput">
    <part name="parameters" element="tns:getIPAddressesWhereLoggedInRequest" />
  </message>
  <message name="getIPAddressesWhereLoggedInOutput">
    <part name="parameters" element="tns:getIPAddressesWhereLoggedInResponse" />
  </message>
  <message name="getLocalServerUIDInput">
    <part name="parameters" element="tns:getLocalServerUIDRequest" />
  </message>
  <message name="getLocalServerUIDOutput">
    <part name="parameters" element="tns:getLocalServerUIDResponse" />
  </message>
  <message name="getMobileFolderInput">
    <part name="parameters" element="tns:getMobileFolderRequest" />
  </message>
  <message name="getMobileFolderOutput">
    <part name="parameters" element="tns:getMobileFolderResponse" />
  </message>
  <message name="getOSTargetInput">
    <part name="parameters" element="tns:getOSTargetRequest" />
  </message>
  <message name="getOSTargetOutput">
    <part name="parameters" element="tns:getOSTargetResponse" />
  </message>
  <message name="getOSTargetByIdInput">
    <part name="parameters" element="tns:getOSTargetByIdRequest" />
  </message>
  <message name="getOSTargetByIdOutput">
    <part name="parameters" element="tns:getOSTargetByIdResponse" />
  </message>
  <message name="getOSTargetByNameSPInput">
    <part name="parameters" element="tns:getOSTargetByNameSPRequest" />
  </message>
  <message name="getOSTargetByNameSPOutput">
    <part name="parameters" element="tns:getOSTargetByNameSPResponse" />
  </message>
  <message name="getOSTargetNamesInput">
    <part name="parameters" element="tns:getOSTargetNamesRequest" />
  </message>
  <message name="getOSTargetNamesOutput">
    <part name="parameters" element="tns:getOSTargetNamesResponse" />
  </message>
  <message name="getOSTargetNamesForPlatformInput">
    <part name="parameters" element="tns:getOSTargetNamesForPlatformRequest" />
  </message>
  <message name="getOSTargetNamesForPlatformOutput">
    <part name="parameters" element="tns:getOSTargetNamesForPlatformResponse" />
  </message>
  <message name="getOSTargetsInput">
    <part name="parameters" element="tns:getOSTargetsRequest" />
  </message>
  <message name="getOSTargetsOutput">
    <part name="parameters" element="tns:getOSTargetsResponse" />
  </message>
  <message name="getObjectHierachyInput">
    <part name="parameters" element="tns:getObjectHierachyRequest" />
  </message>
  <message name="getObjectHierachyOutput">
    <part name="parameters" element="tns:getObjectHierachyResponse" />
  </message>
  <message name="getPlatformsInput">
    <part name="parameters" element="tns:getPlatformsRequest" />
  </message>
  <message name="getPlatformsOutput">
    <part name="parameters" element="tns:getPlatformsResponse" />
  </message>
  <message name="getQueryGroupLogsInput">
    <part name="parameters" element="tns:getQueryGroupLogsRequest" />
  </message>
  <message name="getQueryGroupLogsOutput">
    <part name="parameters" element="tns:getQueryGroupLogsResponse" />
  </message>
  <message name="getRootInput">
    <part name="parameters" element="tns:getRootRequest" />
  </message>
  <message name="getRootOutput">
    <part name="parameters" element="tns:getRootResponse" />
  </message>
  <message name="getRootPathInput">
    <part name="parameters" element="tns:getRootPathRequest" />
  </message>
  <message name="getRootPathOutput">
    <part name="parameters" element="tns:getRootPathResponse" />
  </message>
  <message name="getRootUIDInput">
    <part name="parameters" element="tns:getRootUIDRequest" />
  </message>
  <message name="getRootUIDOutput">
    <part name="parameters" element="tns:getRootUIDResponse" />
  </message>
  <message name="getSearchResultsInput">
    <part name="parameters" element="tns:getSearchResultsRequest" />
  </message>
  <message name="getSearchResultsOutput">
    <part name="parameters" element="tns:getSearchResultsResponse" />
  </message>
  <message name="getServerFolderInput">
    <part name="parameters" element="tns:getServerFolderRequest" />
  </message>
  <message name="getServerFolderOutput">
    <part name="parameters" element="tns:getServerFolderResponse" />
  </message>
  <message name="getWorkstationFolderInput">
    <part name="parameters" element="tns:getWorkstationFolderRequest" />
  </message>
  <message name="getWorkstationFolderOutput">
    <part name="parameters" element="tns:getWorkstationFolderResponse" />
  </message>
  <message name="isTestDeviceInput">
    <part name="parameters" element="tns:isTestDeviceRequest" />
  </message>
  <message name="isTestDeviceOutput">
    <part name="parameters" element="tns:isTestDeviceResponse" />
  </message>
  <message name="lookUpDeviceInput">
    <part name="parameters" element="tns:lookUpDeviceRequest" />
  </message>
  <message name="lookUpDeviceOutput">
    <part name="parameters" element="tns:lookUpDeviceResponse" />
  </message>
  <message name="moveInput">
    <part name="parameters" element="tns:moveRequest" />
  </message>
  <message name="moveOutput">
    <part name="parameters" element="tns:moveResponse" />
  </message>
  <message name="previewQueryGroupMembersInput">
    <part name="parameters" element="tns:previewQueryGroupMembersRequest" />
  </message>
  <message name="previewQueryGroupMembersOutput">
    <part name="parameters" element="tns:previewQueryGroupMembersResponse" />
  </message>
  <message name="previewQueryGroupMembersWithContextsInput">
    <part name="parameters" element="tns:previewQueryGroupMembersWithContextsRequest" />
  </message>
  <message name="previewQueryGroupMembersWithContextsOutput">
    <part name="parameters" element="tns:previewQueryGroupMembersWithContextsResponse" />
  </message>
  <message name="purgeAndUpdateOSTargetsInput">
    <part name="parameters" element="tns:purgeAndUpdateOSTargetsRequest" />
  </message>
  <message name="purgeAndUpdateOSTargetsOutput">
    <part name="parameters" element="tns:purgeAndUpdateOSTargetsResponse" />
  </message>
  <message name="refreshQueryGroupInput">
    <part name="parameters" element="tns:refreshQueryGroupRequest" />
  </message>
  <message name="refreshQueryGroupOutput">
    <part name="parameters" element="tns:refreshQueryGroupResponse" />
  </message>
  <message name="refreshSearchTokenInput">
    <part name="parameters" element="tns:refreshSearchTokenRequest" />
  </message>
  <message name="refreshSearchTokenOutput">
    <part name="parameters" element="tns:refreshSearchTokenResponse" />
  </message>
  <message name="releaseSearchTokenInput">
    <part name="parameters" element="tns:releaseSearchTokenRequest" />
  </message>
  <message name="releaseSearchTokenOutput">
    <part name="parameters" element="tns:releaseSearchTokenResponse" />
  </message>
  <message name="renameInput">
    <part name="parameters" element="tns:renameRequest" />
  </message>
  <message name="renameOutput">
    <part name="parameters" element="tns:renameResponse" />
  </message>
  <message name="retireDeviceInput">
    <part name="parameters" element="tns:retireDeviceRequest" />
  </message>
  <message name="retireDeviceOutput">
    <part name="parameters" element="tns:retireDeviceResponse" />
  </message>
  <message name="searchInput">
    <part name="parameters" element="tns:searchRequest" />
  </message>
  <message name="searchOutput">
    <part name="parameters" element="tns:searchResponse" />
  </message>
  <message name="setDevicesAsNonTestDevicesInput">
    <part name="parameters" element="tns:setDevicesAsNonTestDevicesRequest" />
  </message>
  <message name="setDevicesAsNonTestDevicesOutput">
    <part name="parameters" element="tns:setDevicesAsNonTestDevicesResponse" />
  </message>
  <message name="setDevicesAsTestDevicesInput">
    <part name="parameters" element="tns:setDevicesAsTestDevicesRequest" />
  </message>
  <message name="setDevicesAsTestDevicesOutput">
    <part name="parameters" element="tns:setDevicesAsTestDevicesResponse" />
  </message>
  <message name="unretireDeviceInput">
    <part name="parameters" element="tns:unretireDeviceRequest" />
  </message>
  <message name="unretireDeviceOutput">
    <part name="parameters" element="tns:unretireDeviceResponse" />
  </message>
  <message name="updateInput">
    <part name="parameters" element="tns:updateRequest" />
  </message>
  <message name="updateOutput">
    <part name="parameters" element="tns:updateResponse" />
  </message>
  <message name="updateOSTargetInput">
    <part name="parameters" element="tns:updateOSTargetRequest" />
  </message>
  <message name="updateOSTargetOutput">
    <part name="parameters" element="tns:updateOSTargetResponse" />
  </message>
  <message name="validateDeviceCredentialsInput">
    <part name="parameters" element="tns:validateDeviceCredentialsRequest" />
  </message>
  <message name="validateDeviceCredentialsOutput">
    <part name="parameters" element="tns:validateDeviceCredentialsResponse" />
  </message>
  <message name="getDevicesInFolderInput">
    <part name="parameters" element="tns:getDevicesInFolderRequest" />
  </message>
  <message name="getDevicesInFolderOutput">
    <part name="parameters" element="tns:getDevicesInFolderResponse" />
  </message>
  <message name="getAllDevicesForUserInput">
    <part name="parameters" element="tns:getAllDevicesForUserRequest" />
  </message>
  <message name="getAllDevicesForUserOutput">
    <part name="parameters" element="tns:getAllDevicesForUserResponse" />
  </message>
  <portType name="DeviceAdminService">
    <operation name="clone">
      <input message="tns:cloneInput" />
      <output message="tns:cloneOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="create">
      <input message="tns:createInput" />
      <output message="tns:createOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="createOSTarget">
      <input message="tns:createOSTargetInput" />
      <output message="tns:createOSTargetOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="delete">
      <input message="tns:deleteInput" />
      <output message="tns:deleteOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="deleteOSTarget">
      <input message="tns:deleteOSTargetInput" />
      <output message="tns:deleteOSTargetOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="deleteRecursive">
      <input message="tns:deleteRecursiveInput" />
      <output message="tns:deleteRecursiveOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="existsByParentAndName">
      <input message="tns:existsByParentAndNameInput" />
      <output message="tns:existsByParentAndNameOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="existsByUID">
      <input message="tns:existsByUIDInput" />
      <output message="tns:existsByUIDOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getAllSearchResults">
      <input message="tns:getAllSearchResultsInput" />
      <output message="tns:getAllSearchResultsOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getAllSearchResultsWIthToken">
      <input message="tns:getAllSearchResultsWIthTokenInput" />
      <output message="tns:getAllSearchResultsWIthTokenOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getAttributes">
      <input message="tns:getAttributesInput" />
      <output message="tns:getAttributesOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getBasicObject">
      <input message="tns:getBasicObjectInput" />
      <output message="tns:getBasicObjectOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getByParentAndName">
      <input message="tns:getByParentAndNameInput" />
      <output message="tns:getByParentAndNameOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getByParentUIDAndName">
      <input message="tns:getByParentUIDAndNameInput" />
      <output message="tns:getByParentUIDAndNameOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getByUID">
      <input message="tns:getByUIDInput" />
      <output message="tns:getByUIDOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getDefaultFolder">
      <input message="tns:getDefaultFolderInput" />
      <output message="tns:getDefaultFolderOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getDeviceAgentVersion">
      <input message="tns:getDeviceAgentVersionInput" />
      <output message="tns:getDeviceAgentVersionOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getDeviceByHostName">
      <input message="tns:getDeviceByHostNameInput" />
      <output message="tns:getDeviceByHostNameOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getDevicePlatform">
      <input message="tns:getDevicePlatformInput" />
      <output message="tns:getDevicePlatformOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getDeviceUIDsWhereLoggedIn">
      <input message="tns:getDeviceUIDsWhereLoggedInInput" />
      <output message="tns:getDeviceUIDsWhereLoggedInOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getFullQueryGroupLog">
      <input message="tns:getFullQueryGroupLogInput" />
      <output message="tns:getFullQueryGroupLogOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getIPAddressesWhereLoggedIn">
      <input message="tns:getIPAddressesWhereLoggedInInput" />
      <output message="tns:getIPAddressesWhereLoggedInOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getLocalServerUID">
      <input message="tns:getLocalServerUIDInput" />
      <output message="tns:getLocalServerUIDOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getMobileFolder">
      <input message="tns:getMobileFolderInput" />
      <output message="tns:getMobileFolderOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getOSTarget">
      <input message="tns:getOSTargetInput" />
      <output message="tns:getOSTargetOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getOSTargetById">
      <input message="tns:getOSTargetByIdInput" />
      <output message="tns:getOSTargetByIdOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getOSTargetByNameSP">
      <input message="tns:getOSTargetByNameSPInput" />
      <output message="tns:getOSTargetByNameSPOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getOSTargetNames">
      <input message="tns:getOSTargetNamesInput" />
      <output message="tns:getOSTargetNamesOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getOSTargetNamesForPlatform">
      <input message="tns:getOSTargetNamesForPlatformInput" />
      <output message="tns:getOSTargetNamesForPlatformOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getOSTargets">
      <input message="tns:getOSTargetsInput" />
      <output message="tns:getOSTargetsOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getObjectHierachy">
      <input message="tns:getObjectHierachyInput" />
      <output message="tns:getObjectHierachyOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getPlatforms">
      <input message="tns:getPlatformsInput" />
      <output message="tns:getPlatformsOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getQueryGroupLogs">
      <input message="tns:getQueryGroupLogsInput" />
      <output message="tns:getQueryGroupLogsOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getRoot">
      <input message="tns:getRootInput" />
      <output message="tns:getRootOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getRootPath">
      <input message="tns:getRootPathInput" />
      <output message="tns:getRootPathOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getRootUID">
      <input message="tns:getRootUIDInput" />
      <output message="tns:getRootUIDOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getSearchResults">
      <input message="tns:getSearchResultsInput" />
      <output message="tns:getSearchResultsOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getServerFolder">
      <input message="tns:getServerFolderInput" />
      <output message="tns:getServerFolderOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getWorkstationFolder">
      <input message="tns:getWorkstationFolderInput" />
      <output message="tns:getWorkstationFolderOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="isTestDevice">
      <input message="tns:isTestDeviceInput" />
      <output message="tns:isTestDeviceOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="lookUpDevice">
      <input message="tns:lookUpDeviceInput" />
      <output message="tns:lookUpDeviceOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="move">
      <input message="tns:moveInput" />
      <output message="tns:moveOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="previewQueryGroupMembers">
      <input message="tns:previewQueryGroupMembersInput" />
      <output message="tns:previewQueryGroupMembersOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="previewQueryGroupMembersWithContexts">
      <input message="tns:previewQueryGroupMembersWithContextsInput" />
      <output message="tns:previewQueryGroupMembersWithContextsOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="purgeAndUpdateOSTargets">
      <input message="tns:purgeAndUpdateOSTargetsInput" />
      <output message="tns:purgeAndUpdateOSTargetsOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="refreshQueryGroup">
      <input message="tns:refreshQueryGroupInput" />
      <output message="tns:refreshQueryGroupOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="refreshSearchToken">
      <input message="tns:refreshSearchTokenInput" />
      <output message="tns:refreshSearchTokenOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="releaseSearchToken">
      <input message="tns:releaseSearchTokenInput" />
      <output message="tns:releaseSearchTokenOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="rename">
      <input message="tns:renameInput" />
      <output message="tns:renameOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="retireDevice">
      <input message="tns:retireDeviceInput" />
      <output message="tns:retireDeviceOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="search">
      <input message="tns:searchInput" />
      <output message="tns:searchOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="setDevicesAsNonTestDevices">
      <input message="tns:setDevicesAsNonTestDevicesInput" />
      <output message="tns:setDevicesAsNonTestDevicesOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="setDevicesAsTestDevices">
      <input message="tns:setDevicesAsTestDevicesInput" />
      <output message="tns:setDevicesAsTestDevicesOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="unretireDevice">
      <input message="tns:unretireDeviceInput" />
      <output message="tns:unretireDeviceOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="update">
      <input message="tns:updateInput" />
      <output message="tns:updateOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="updateOSTarget">
      <input message="tns:updateOSTargetInput" />
      <output message="tns:updateOSTargetOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="validateDeviceCredentials">
      <input message="tns:validateDeviceCredentialsInput" />
      <output message="tns:validateDeviceCredentialsOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getDevicesInFolder">
      <input message="tns:getDevicesInFolderInput" />
      <output message="tns:getDevicesInFolderOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
    <operation name="getAllDevicesForUser">
      <input message="tns:getAllDevicesForUserInput" />
      <output message="tns:getAllDevicesForUserOutput" />
      <fault name="RemoteDataModelException" message="tns:RemoteDataModelException" />
    </operation>
  </portType>
  <binding name="DeviceAdminServiceBinding" type="tns:DeviceAdminService">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" />
    <operation name="clone">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/clone" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="create">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/create" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="createOSTarget">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/createOSTarget" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="delete">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/delete" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="deleteOSTarget">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/deleteOSTarget" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="deleteRecursive">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/deleteRecursive" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="existsByParentAndName">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/existsByParentAndName" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="existsByUID">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/existsByUID" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getAllSearchResults">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getAllSearchResults" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getAllSearchResultsWIthToken">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getAllSearchResultsWIthToken" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getAttributes">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getAttributes" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getBasicObject">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getBasicObject" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getByParentAndName">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getByParentAndName" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getByParentUIDAndName">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getByParentUIDAndName" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getByUID">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getByUID" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getDefaultFolder">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getDefaultFolder" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getDeviceAgentVersion">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getDeviceAgentVersion" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getDeviceByHostName">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getDeviceByHostName" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getDevicePlatform">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getDevicePlatform" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getDeviceUIDsWhereLoggedIn">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getDeviceUIDsWhereLoggedIn" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getFullQueryGroupLog">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getFullQueryGroupLog" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getIPAddressesWhereLoggedIn">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getIPAddressesWhereLoggedIn" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getLocalServerUID">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getLocalServerUID" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getMobileFolder">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getMobileFolder" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getOSTarget">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getOSTarget" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getOSTargetById">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getOSTargetById" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getOSTargetByNameSP">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getOSTargetByNameSP" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getOSTargetNames">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getOSTargetNames" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getOSTargetNamesForPlatform">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getOSTargetNamesForPlatform" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getOSTargets">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getOSTargets" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getObjectHierachy">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getObjectHierachy" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getPlatforms">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getPlatforms" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getQueryGroupLogs">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getQueryGroupLogs" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getRoot">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getRoot" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getRootPath">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getRootPath" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getRootUID">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getRootUID" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getSearchResults">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getSearchResults" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getServerFolder">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getServerFolder" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getWorkstationFolder">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getWorkstationFolder" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="isTestDevice">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/isTestDevice" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="lookUpDevice">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/lookUpDevice" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="move">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/move" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="previewQueryGroupMembers">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/previewQueryGroupMembers" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="previewQueryGroupMembersWithContexts">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/previewQueryGroupMembersWithContexts" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="purgeAndUpdateOSTargets">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/purgeAndUpdateOSTargets" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="refreshQueryGroup">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/refreshQueryGroup" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="refreshSearchToken">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/refreshSearchToken" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="releaseSearchToken">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/releaseSearchToken" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="rename">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/rename" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="retireDevice">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/retireDevice" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="search">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/search" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="setDevicesAsNonTestDevices">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/setDevicesAsNonTestDevices" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="setDevicesAsTestDevices">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/setDevicesAsTestDevices" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="unretireDevice">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/unretireDevice" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="update">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/update" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="updateOSTarget">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/updateOSTarget" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="validateDeviceCredentials">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/validateDeviceCredentials" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getDevicesInFolder">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getDevicesInFolder" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
    <operation name="getAllDevicesForUser">
      <soap:operation soapAction="http://novell.com/zenworks/datamodel/services/devices/soap/getAllDevicesForUser" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="RemoteDataModelException">
        <soap:body name="RemoteDataModelException" use="literal" />
      </fault>
    </operation>
  </binding>
  <service name="DeviceAdminServiceService">
    <port name="DeviceAdminServicePort" binding="tns:DeviceAdminServiceBinding">
      <soap:address location="https://dev-thk-zcm-01.dvz.fh-koeln.de/zenworks-deviceadmin" />
    </port>
  </service>
</definitions>